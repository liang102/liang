[{"content":" 改变宽高范围 默认情况下，width 和 height 设置的是内容盒宽高。\n页面重构师：将psd文件（设计稿）制作为静态页面\n衡量设计稿尺寸时，往往使用的是边框盒，但设置width和height，则设置的是内容盒\n精确计算 CSS3: box-sizing 改变背景覆盖范围 默认情况下，背景覆盖边框盒 可以通过 background-clip 进行修改\n溢出处理 overflow, 控制内容溢出边框盒后的处理方式\n断词规则 word-bread，会影响文字在什么位置被截断换行。\nnormal：普通，CJK字符（文字位置截断），非CJK字符（单词位置截断）\nC：中国 J：日本 K：韩国 break-all：截断所有，所有字符都在文字处截断。\nkeep-all: 保持所有，所有文字都在单词之间截断。\n空白处理 white-space: nowrap\n","date":"January 1, 1","externalUrl":"","permalink":"/docs/css/day08/","section":"Docs","summary":"盒模型应用","title":"8.盒模型应用","type":"docs"},{"content":" 菜单 blowfish 主题提供了三个菜单\nmain 菜单出现在网站标题中。 subnavigation 子菜单，出现在main菜单的下方。 footer 菜单出现在网站底部版权声明的正上方。 默认是独立的配置文件 menus.en.toml，确保该文件命名与站点配置中defaultContentLanguage 的语言代码相同。 若defaultContentLanguage = zh-cn, 则文件名为：menus.zh-cn.toml\n# 第一种配置菜单方式 [[main]] # 一级菜单标识 name = \u0026#34;博客\u0026#34; # 网站菜单目录名称 pre = \u0026#34;grav\u0026#34; # 菜单图标icon. svg图标名称 pageRef = \u0026#34;blog\u0026#34; # 网站菜单目录对应的路径 weight = 10 # 权重，数值大小用于排序。 # 第二种配置菜单的方式，嵌套菜单 [[main]] name = \u0026#34;菜单父目录\u0026#34; # 菜单父目录 weight = 20 # 权重，这个权重数值将 排在博客后面 [[main]] name = \u0026#34;子目录1\u0026#34; # 菜单子目录1 parent = \u0026#34;菜单父目录\u0026#34; # 指定菜单父目录 pageRef = \u0026#34;posts/one\u0026#34; # 菜单路径，即帖子存放路径 weight = 20 # 权重，与父目录保持一致。 [[main]] name = \u0026#34;子目录2\u0026#34; # 菜单子目录2 parent = \u0026#34;菜单父目录\u0026#34; # 指定菜单父目录 pageRef = \u0026#34;posts/two\u0026#34; # 菜单路径，即帖子存放路径, 路径可相同可不同。 weight = 20 # 权重，与父目录保持一致。 # 菜单配置链接方式 [[main]] identifier = \u0026#34;github\u0026#34; # 菜单名称 pre = \u0026#34;github\u0026#34; # icon 图标名称 url = \u0026#34;https://github.com/nunocoracao/blowfish\u0026#34; # 菜单链接 weight = 30 # 权重 # 二级菜单配置方式,子导航菜单 [[subnavigation]] # 二级菜单标识 name = \u0026#34;二级菜单\u0026#34; # 二级菜单名称 pageRef = \u0026#34;/docs/some\u0026#34; # 二级菜单对应路径 weight = 10 # 二级菜单权重 # 页脚菜单 [[footer]] # 页脚菜单标识 name = \u0026#34;标签\u0026#34; # 页脚菜单名称 pageRef = \u0026#34;tages\u0026#34; # 页脚菜单对应路径 weight = 20 # 权重 ","date":"January 1, 1","externalUrl":"","permalink":"/docs/theme/menus/","section":"Docs","summary":"网站主页菜单布局教程","title":"Blowfish主题菜单设置","type":"docs"},{"content":" hugo 评论参考 hugo-theme-stack 主题 本文评论指南 本文主要添加以下三个评论系统。\nTwikoo Waline giscus 添加评论 首先讲讲如何简单的添加评论，根据主题作者预留评论位置，只需要加一个comments.html文件即可。 启用评论配置 blowfish主题默认给我们预留了文章评论的功能，需要在配置文件config/default/params 中找到article.showComments该参数并启用true\n[article] showComments = true 登录 giscus 配置连接仓库 安装 giscus app 复制这段代码，待会有用。 添加Giscus评论 在博客目录下的layouts/partials/这个位置添加comments.html文件。 然后就OK了。 mkdir layouts/partials/\r# 编辑comment.html 文件, 将复制的代码贴进来。\r\u0026lt;div class=\u0026#34;comment\u0026#34; id=\u0026#34;giscus\u0026#34;\u0026gt;\r\u0026lt;script src=\u0026#34;https://giscus.app/client.js\u0026#34;\rdata-repo=\u0026#34;\u0026#34; # 仓库地址()\rdata-repo-id=\u0026#34;\u0026#34; # 仓库id()\rdata-category=\u0026#34;\u0026#34; # 分类名\rdata-category-id=\u0026#34;\u0026#34; # 分类id\rdata-mapping=\u0026#34;pathname\u0026#34;\rdata-strict=\u0026#34;0\u0026#34;\rdata-reactions-enabled=\u0026#34;1\u0026#34;\rdata-emit-metadata=\u0026#34;0\u0026#34;\rdata-input-position=\u0026#34;top\u0026#34;\rdata-theme=\u0026#34;preferred_color_scheme\u0026#34;\rdata-lang=\u0026#34;zh-CN\u0026#34;\rdata-loading=\u0026#34;lazy\u0026#34;\rcrossorigin=\u0026#34;anonymous\u0026#34;\rasync\u0026gt;\r\u0026lt;/script\u0026gt;\r\u0026lt;/div\u0026gt; 自定义评论 需要对主题页面进行一点点修改。 扩展评论系统，可以自由选择评论。 支持页面和文章区展示评论。 single.html 控制文章布局 list.html 控制列表布局 修改主题文章布局配置文件 不要动主题下的布局文件 在博客目录下的layouts/_default/这个位置，添加一个single.html文件。 mkdir layouts/_default/ cp theme/blowfish/layouts/_default/single.html layouts/_default/ 编辑layouts/_default/single.html 文件 {{ if .Params.showComments | default (.Site.Params.article.showComments | default false) }} {{ if templates.Exists \u0026#34;partials/comments.html\u0026#34; }} \u0026lt;div class=\u0026#34;pt-3\u0026#34;\u0026gt; \u0026lt;hr class=\u0026#34;border-dotted border-neutral-300 dark:border-neutral-600\u0026#34; /\u0026gt; \u0026lt;div class=\u0026#34;pt-3\u0026#34;\u0026gt; {{ partial \u0026#34;comments.html\u0026#34; . }} \u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; {{ else }} {{ warnf \u0026#34;[BLOWFISH] Comments are enabled for %s but no comments partial exists.\u0026#34; .File.Path }} {{ end }} {{ end }} # 将上面这段代码换成下面这样 {{ if .Params.Comments.enable | default (.Site.Params.Comments.enable | default false) }} {{ $comment := .Params.Comments.provider | default .Site.Params.Comments.provider }} {{ $provider := print \u0026#34;partials/Comments/\u0026#34; $comment \u0026#34;.html\u0026#34; }} {{ if templates.Exists $provider }} \u0026lt;div class=\u0026#34;pt-3\u0026#34;\u0026gt; \u0026lt;hr class=\u0026#34;border-dotted border-neutral-300 dark:border-neutral-600\u0026#34; /\u0026gt; \u0026lt;div class=\u0026#34;pt-3\u0026#34;\u0026gt; {{ partial $provider . }} \u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; {{ else }} {{ warnf \u0026#34;[BLOWFISH] Comments are enabled for %s but no $provider partial exists.\u0026#34; .File.Path }} {{ end }} {{ end }} 添加评论 在博客目录下layouts/partials/ 创建一个Comments目录。 评论系统都放到这个目录下，按照评论系统名称命名。例如：giscus评论，则giscus.html mkdir layouts/partials/Comments cd layouts/partials/ mv comments.html Comments/giscus.html 为展示效果，再添加两个评论，Twikoo 和 Waline\nTwikoo 41 字\u0026middot; loading \u0026middot; loading twikoo Twikoo评论部署指南 配置Twikoo评论 在layouts/partials/Comments目录下创建一个twikoo.html文件 # 添加以下内容 \u0026lt;div id=\u0026#34;tcomment\u0026#34;\u0026gt;\u0026lt;/div\u0026gt; \u0026lt;script src=\u0026#34;https://cdn.staticfile.org/twikoo/{{ .Site.Params.twikoo.version }}/twikoo.all.min.js\u0026#34;\u0026gt;\u0026lt;/script\u0026gt; \u0026lt;script\u0026gt; twikoo.init({ envId: \u0026#39;https://xxx.vercel.app\u0026#39;, // Twikoo服务端地址 el: \u0026#39;#tcomment\u0026#39;, //lang: \u0026#39;zh-CN\u0026#39;, //region: \u0026#39;ap-shanghai\u0026#39;, //path: \u0026#39;pathname\u0026#39;, }); \u0026lt;/script\u0026gt; Waline 33 字\u0026middot; loading \u0026middot; loading waline Waline评论部署指南 配置Waline评论 在layouts/partials/Comments目录下创建一个waline.html文件 \u0026lt;link href=\u0026#34;https://unpkg.com/@waline/client@v3/dist/waline.css\u0026#34; rel=\u0026#34;stylesheet\u0026#34; /\u0026gt; \u0026lt;script src=\u0026#34;https://unpkg.com/@waline/client@v3/dist/waline.js\u0026#34;\u0026gt;\u0026lt;/script\u0026gt; \u0026lt;div id=\u0026#34;waline\u0026#34;\u0026gt;\u0026lt;/div\u0026gt; \u0026lt;script type=\u0026#34;module\u0026#34;\u0026gt; import { init } from \u0026#39;https://unpkg.com/@waline/client@v3/dist/waline.js\u0026#39;; init({ el: \u0026#39;#waline\u0026#39;, meta: [\u0026#39;nick\u0026#39;,\u0026#39;mail\u0026#39;,\u0026#39;link\u0026#39;], // 评论属性 requiredMeta: [\u0026#39;nick\u0026#39;,\u0026#39;mail\u0026#39;], // 必填项，昵称与邮件 login: \u0026#39;force\u0026#39;, // 登录后访问 comment: true, // 评论数统计 placeholder: \u0026#39;欢迎评论\u0026#39;, // 评论框占位提示符 serverURL: \u0026#34;https://xxx.vercel.app\u0026#34;, // Waline 服务端地址 avatar: \u0026#34;wavatar\u0026#34;, // 头像 avatarCDN: \u0026#34;https://sdn.geekzu.org/avatar/\u0026#34;, // 头像cdn pageSize: 10, // 评论每页条数 lang: \u0026#34;zh-CN\u0026#34;, // 语言 visitor: true, // 文章访问量统计 highlight: true, // 代码高亮 uploadImage: false, // 评论上传图片功能 emoji: \u0026#34;https://cdn.jsdelivr.net/gh/walinejs/emojis@1.0.0/weibo\u0026#34; // emoji 表情包 }) \u0026lt;/script\u0026gt; 修改配置文件 编辑配置文件config/_default/params.toml # 在空白处添加以下内容 Comments # 是否开启文章评论 enable = true # 全局指定文章评论giscus |twikoo |waline provider = \u0026#34;giscus\u0026#34; 在文章中也可以控制评论系统，只需要在 font matter 处添加 Comments: provider: \u0026#34;waline\u0026#34; 修改主题页面布局配置文件 在博客目录下layouts/_default/ 添加一个list.html文件 cp theme/blowfish/layouts/_default/list.html layouts/_default/ 编辑list.html文件 # 在 {{ partial \u0026#34;pagination.html\u0026#34; . }} 这行的下面添加以下内容 {{ if .Params.pageComments.enable | default (.Site.Params.pageComments.enable | default false) }} {{ $comment := .Params.pageComments.provider | default .Site.Params.Comments.provider }} {{ $provider := print \u0026#34;partials/Comments/\u0026#34; $comment \u0026#34;.html\u0026#34; }} {{ if templates.Exists $provider }} \u0026lt;div class=\u0026#34;pt-3\u0026#34;\u0026gt; \u0026lt;hr class=\u0026#34;border-dotted border-neutral-300 dark:border-neutral-600\u0026#34; /\u0026gt; \u0026lt;div class=\u0026#34;pt-3\u0026#34;\u0026gt; {{ partial $provider . }} \u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; {{ else }} {{ warnf \u0026#34;[BLOWFISH] Comments are enabled for %s but no $provider partial exists.\u0026#34; .File.Path }} {{ end }} {{ end }} 修改配置文件 编辑配置文件config/_default/params.toml # 在空白处添加以下内容 pageComments # 是否开启分页评论。不建议全局开启，可在有需要页面开启。 enable = false Font Matter 填写 文章级别index.md # 开启 --- Comments: enable: true # 如果全局已开启，这条可以忽略 provider: \u0026#34;twikoo\u0026#34; --- # 关闭 --- Comments: enable: false --- 页面级别_index.md # 开启 --- pageComments: enable: true provider: \u0026#34;giscus\u0026#34; --- # 关闭 --- pageComments: enable: false --- ","date":"January 1, 1","externalUrl":"","permalink":"/docs/theme/comment/","section":"Docs","summary":"添加评论","title":"Blowfish主题添加评论","type":"docs"},{"content":" Twikoo 评论部署 详细配置，请查看 Twikoo 文档 本教程使用 vercel部署 注册一个 MongoDB 账号 创建一个免费的MongoDB数据库，选择FREE类型的，aws厂商提供，地区我这里选择的是香港。 创建一个MongoDB数据库用户。 开放网络地址访问，允许所有网络进行连接。 在 Database 页面点击 Connect，选择 Drivers，复制数据库连接字符串，将连接字符串中的 : 修改为刚刚创建的数据库 用户名:密码。 申请 Vercel 账号。连接github第三方服务登录。可以在设置中查看和管理三方服务的连接登录。 点击以下按钮将 Twikoo 一键部署到 Vercel 添加环境变量。进入项目设置settings \u0026mdash;- 环境变量Environment Variables，添加环境变量key: MONGODB_URI value: 将前面复制的数据库连接字符串粘贴到这里 修改功能区，无服务器函数的区域，选择与MongoDB数据库相同的地区。我前面MongoDB选择的是香港，这里也选择香港。 重新部署，是环境变量生效 部署成功后会看到云函数运行正常。 配置自定义域名，修改域名DNS解析，将解析cname 到 cname.vercel-dns.com这个域名上，才能访问成功。 ","date":"January 1, 1","externalUrl":"","permalink":"/posts/twikoo/","section":"笔记","summary":"Twikoo评论部署指南","title":"Twikoo","type":"posts"},{"content":" Waline 评论部署 本教程使用 vercel 部署，其他部署渠道请查看 valine配置文档 注册一个 LeanCloud 国际版 账号\n创建一个应用, 在设置里的应用凭证会看到AppID AppKey MasterKey，后续会用到。\n点击下方按钮，跳转至 Vercel 进行 Server 端部署。跟twikoo 部署步骤一样，这里就不详细说了，创建一个仓库，例如：valine-api 给该项目添加3个环境变量，LEAN_ID 值对应 AppID, LEAN_KEY 值对应AppKey 和 LEAN_MASTER_KEY 值对应 MasterKey。 重新部署，使环境变量生效。看到评论框代表部署成功。 添加自定义域名，配置域名DNS解析cname 到 cname.vercel-dns.com这个域名上，才能访问成功。如下图。 ","date":"January 1, 1","externalUrl":"","permalink":"/posts/waline/","section":"笔记","summary":"Waline评论部署指南","title":"Waline","type":"posts"},{"content":" 自定义简码 实现简码说说功能 实现简码网易云音乐功能 Artitalk 说说简码 请仔细阅读 官方文档 并创建一个说说应用。 在博客目录layouts/shortcodes下创建artitalk.html文件 mkdir layouts/shortcode \u0026lt;script type=\u0026#34;text/javascript\u0026#34; src=\u0026#34;https://unpkg.com/artitalk\u0026#34;\u0026gt;\u0026lt;/script\u0026gt; \u0026lt;!-- 存放说说的容器 --\u0026gt; \u0026lt;div id=\u0026#34;artitalk_main\u0026#34;\u0026gt;\u0026lt;/div\u0026gt; \u0026lt;script\u0026gt; new Artitalk({ appId: \u0026#34;{{ .Get \u0026#34;appId\u0026#34; }}\u0026#34;, appKey: \u0026#34;{{ .Get \u0026#34;appKey\u0026#34; }}\u0026#34;, atEmoji: { weibo: \u0026#34;https://cdn.jsdelivr.net/gh/walinejs/emojis@1.0.0/weibo\u0026#34;, bilibili: \u0026#34;https://cdn.jsdelivr.net/gh/walinejs/emojis@1.0.0/bilibili\u0026#34;, qq: \u0026#34;https://cdn.jsdelivr.net/gh/walinejs/emojis@1.0.0/qq\u0026#34;, baiyan: \u0026#34;https://cdn.jsdelivr.net/gh/Artitalk/Artitalk-emoji/baiyan.png\u0026#34;, bishi: \u0026#34;https://cdn.jsdelivr.net/gh/Artitalk/Artitalk-emoji/bishi.png\u0026#34;, bizui: \u0026#34;https://cdn.jsdelivr.net/gh/Artitalk/Artitalk-emoji/bizui.png\u0026#34;, chan: \u0026#34;https://cdn.jsdelivr.net/gh/Artitalk/Artitalk-emoji/chan.png\u0026#34;, daku: \u0026#34;https://cdn.jsdelivr.net/gh/Artitalk/Artitalk-emoji/daku.png\u0026#34;, dalao: \u0026#34;https://cdn.jsdelivr.net/gh/Artitalk/Artitalk-emoji/dalao.png\u0026#34;, dalian: \u0026#34;https://cdn.jsdelivr.net/gh/Artitalk/Artitalk-emoji/dalian.png\u0026#34;, dianzan: \u0026#34;https://cdn.jsdelivr.net/gh/Artitalk/Artitalk-emoji/dianzan.png\u0026#34;, doge: \u0026#34;https://cdn.jsdelivr.net/gh/Artitalk/Artitalk-emoji/doge.png\u0026#34;, facai: \u0026#34;https://cdn.jsdelivr.net/gh/Artitalk/Artitalk-emoji/facai.png\u0026#34;, fadai: \u0026#34;https://cdn.jsdelivr.net/gh/Artitalk/Artitalk-emoji/fadai.png\u0026#34;, fanu: \u0026#34;https://cdn.jsdelivr.net/gh/Artitalk/Artitalk-emoji/fanu.png\u0026#34;, }, }) \u0026lt;/script\u0026gt; 网易云音乐简码 在博客目录layouts/shortcodes下创建music.html文件 \u0026lt;div id=\u0026#34;music\u0026#34;\u0026gt; \u0026lt;iframe frameborder=\u0026#34;no\u0026#34; border=\u0026#34;0\u0026#34; marginwidth=\u0026#34;0\u0026#34; marginheight=\u0026#34;0\u0026#34; width=330 height=86 src=\u0026#34;//music.163.com/outchain/player?type=2\u0026amp;id={{ .Get 0 }}\u0026amp;auto=0\u0026amp;height=66\u0026#34;\u0026gt;\u0026lt;/iframe\u0026gt; \u0026lt;/div\u0026gt; 简码调用 {{\u0026lt; artitalk appId=\u0026#34;Your LeanCloud appId\u0026#34; appKey=\u0026#34;Your LeanCloud appKey\u0026#34; \u0026gt;}} {{\u0026lt; music \u0026#34;网易云音乐id号\u0026#34; \u0026gt;}} ","date":"January 1, 1","externalUrl":"","permalink":"/docs/theme/shortcodes/","section":"Docs","summary":"添加说说、网易云音乐简码功能","title":"自定义简码功能","type":"docs"},{"content":" 属性值的计算过程 一个元素一个元素依次渲染，顺序按照页面文档的树形目录结构进行 渲染每个元素的前提条件：该元素的所有CSS属性必须有值 一个元素，从所有属性都没有值，到所有的属性都有值，这个计算过程，叫做属性值的计算过程。 无属性值 \u0026mdash;-\u0026gt; 1.确定声明值 \u0026mdash;-\u0026gt; 2.层叠冲突 \u0026mdash;-\u0026gt; 3.使用继承 \u0026mdash;-\u0026gt; 4.使用默认值 \u0026mdash;-\u0026gt; 每个属性都有值\n确定声明值：参考样式表中没有冲突的声明，作为CSS属性值。 层叠冲突：对样式表有冲突的声明使用层叠规则，确定CSS属性值。 使用继承：对仍然没有值的属性，若可以继承，则继承父元素的值。 使用默认值：对仍然没有值的属性，使用默认值。 特殊的两个CSS取值： inherit：手动（强制）继承，将父元素的值取出应用到该元素。 initial：初始值，将该属性设置为默认值。 ","date":"January 1, 1","externalUrl":"","permalink":"/docs/css/day07/","section":"Docs","summary":"元素属性渲染的计算过程原理","title":"7.属性值的计算过程","type":"docs"},{"content":" 默认是独立的配置文件: languages.en.toml，确保该文件命名与站点配置中defaultContentLanguage 的语言代码相同。 若defaultContentLanguage = zh-cn, 则文件名为：languages.zh-cn.toml\n网站标题图标设置 仅支持图片, 图片路径可以是自定义。 [params] logo = \u0026#34;img/logo.png\u0026#34; # 网站标题logo 作者图标设置 仅支持图片, 图片路径可以是自定义。 [author] image = \u0026#34;img/avatar.png\u0026#34; # 作者头像设置 浏览器图标设置 网站图标生成器 将生成的图标放入static/目录下即可 unzip -d static favicon_package_v0.16.zip ls static/ android-chrome-192x192.png android-chrome-512x512.png apple-touch-icon.png favicon-16x16.png favicon-32x32.png favicon.ico site.webmanifest ","date":"January 1, 1","externalUrl":"","permalink":"/docs/theme/face/","section":"Docs","summary":"浏览器图标以及站点图标和作者图标教程","title":"网站图标设置","type":"docs"},{"content":" 子元素会继承父元素的某些CSS属性。 若父元素没有设置该属性，则会再找父元素的父元素，直到html元素 若html元素也没有设置，则会根据浏览器设置，例如: font-size 属性 通常，跟文字内容相关的属性都能被继承。 通常都在body设置字体类型。 Inherited from div.container 继承 div 的样式 Inherited from body 继承 body 的样式 Inherited from html 继承 html 的样式 \u0026lt;style\u0026gt; .container{ color: red; font-size: 2em; line-height: 2.5; background-color: bisque; text-align: center; } body { font-family: Arial, Helvetica, sans-serif; } \u0026lt;/style\u0026gt; \u0026lt;body\u0026gt; \u0026lt;div class=\u0026#34;container\u0026#34;\u0026gt; \u0026lt;p\u0026gt; Lorem ipsum dolor sit amet consectetur adipisicing elit. Vero, laboriosam aut, reprehenderit laudantium earum atque provident quasi optio doloremque nam ipsam repellat harum odit in eos quia. Assumenda, eveniet nihil! \u0026lt;/p\u0026gt; \u0026lt;ul\u0026gt; \u0026lt;li\u0026gt;Lorem.\u0026lt;/li\u0026gt; \u0026lt;li\u0026gt;Id.\u0026lt;/li\u0026gt; \u0026lt;li\u0026gt;Repudiandae.\u0026lt;/li\u0026gt; \u0026lt;li\u0026gt;Molestiae!\u0026lt;/li\u0026gt; \u0026lt;li\u0026gt;Impedit!\u0026lt;/li\u0026gt; \u0026lt;li\u0026gt;Facere.\u0026lt;/li\u0026gt; \u0026lt;li\u0026gt;Maxime.\u0026lt;/li\u0026gt; \u0026lt;li\u0026gt;Eveniet?\u0026lt;/li\u0026gt; \u0026lt;li\u0026gt;Harum!\u0026lt;/li\u0026gt; \u0026lt;li\u0026gt;Facere!\u0026lt;/li\u0026gt; \u0026lt;/ul\u0026gt; \u0026lt;div\u0026gt; Lorem ipsum, dolor sit amet consectetur adipisicing elit. Vero quos veritatis necessitatibus ea excepturi. Eaque totam dolorum laborum enim mollitia tempora ex, molestias sapiente, illo vel error in impedit porro? \u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/body\u0026gt; ","date":"January 1, 1","externalUrl":"","permalink":"/docs/css/day06/","section":"Docs","summary":"元素继承用例","title":"6.继承","type":"docs"},{"content":" 默认是独立的配置文件: params.toml. 该文件是使用主题blowfish所有配置。 这篇文章主要讲解如何配置网站的背景图。\n网站主页背景图设置 [homepage] # 找到主页的配置 homepageImage = \u0026#34;/img/images.jpg\u0026#34; 菜单功能里的背景图设置 defaultBackgroundImage = \u0026#34;/img/images.jpg\u0026#34; 文章背景图设置 当文章没有使用图片作为封面时，整个设置很有用。 defaultFeaturedImage = \u0026#34;/img/images.jpg\u0026#34; ","date":"January 1, 1","externalUrl":"","permalink":"/docs/theme/background/","section":"Docs","summary":"blowfish主题背景应用","title":"网站主题背景图设置","type":"docs"},{"content":" box：盒子，每个元素在页面中都会生成一个矩形区域（盒子box）\n盒子类型 行盒：display等于inline的元素。 块盒：display等于block的元素。 行盒在页面中不换行，块盒独占一行。\ndisplay默认值为inline\n浏览器默认样式表设置的块盒：容器元素、h1~h6、p\n常见的行盒：span、 a、 img、 video、 audio\n盒子的组成部分 无论是行盒、还是块盒，都由下面几个部分组成，从内到外分别是： 1. 内容 content - width 宽度 - height 高度 - 这两个值设置的盒子内容的宽高。 - 内容部分通常叫做整个盒子的**内容盒 content-box** 2. 填充(内边距) padding - 盒子的边框到盒子内容的距离 - padding-left 左内边距 - padding-right 由内边距 - padding-top 上内边距 - padding-bottom 下内边距 padding：简写属性(速写属性) padding：上 右 下 左 填充区+内容区域 = 填充盒 padding-box 3. 边框 border 边框 = 边框样式 + 边框宽度 + 边框颜色 边框样式: border-style 边框宽度： border-width 边框颜色：border-color\n边框+填充区+内容区 = 边框盒 border-box\n4. 外边距 margin 边框到其他盒子的距离 margin-top margin-left margin-right margin-bottom 速写属性：margin\n","date":"January 1, 1","externalUrl":"","permalink":"/docs/css/day05/","section":"Docs","summary":"盒模型应用","title":"5.盒模型","type":"docs"},{"content":" 多名作者 如果你的网站有多个作者贡献内容，那么就需要多个作者。\n创建作者 在data目录下创建authors目录。 以作者名称为文件名，在data/authors/目录下创建一个作者名称.json文件。方便后续在文章中引用。 文件内容与languages.语言代码.toml文件里的author一样，只不过换成json的格式书写。 mkdir data/authors touch data/authors/小橘子Single.json # json 文件内容如下格式： { \u0026#34;name\u0026#34;: \u0026#34;小橘子Single\u0026#34;, \u0026#34;image\u0026#34; : \u0026#34;img/avatar.png\u0026#34;, \u0026#34;bio\u0026#34;: \u0026#34;如你所见\u0026#34;, \u0026#34;social\u0026#34;: [ { \u0026#34;github\u0026#34;: \u0026#34;https://github.com/liang102\u0026#34; } ] } 参数说明 name：作者名称 image：作者头像 bio: 作者简介 social：作者社交链接,支持多个社交链接 - email - link - amazon - apple - blogger - codepen - dev - discord - dribbble - facebook - flickr - foursquare - github - gitlab - google - hashnode - instagram - keybase - kickstarter - lastfm - linkedin - mastodon - medium - microsoft - orcid - patreon - pinterest - reddit - researchgate - slack - snapchat - soundcloud - stack-overflow - steam - telegram - tiktok - tumblr - twitch - twitter - x-twitter - whatsapp - youtube - ko-fi 创建作者分类 在配置文件config/_default/config.toml中找到taxonomies添加atuthor。这样文章将通过作者进行文章分类。 [taxonomies] tag = \u0026#34;tags\u0026#34; category = \u0026#34;categories\u0026#34; author = \u0026#34;authors\u0026#34; 配置多名作者菜单 编辑菜单文件config/_default/menus.语言代码.toml 配置到哪都行，主要是pageRef参数必须是authors，这样就方便通过作者找到对应的文章。 我这里习惯配置到页脚。 [[footer]] name = \u0026#34;©小橘子Single\u0026#34; pageRef = \u0026#34;authors\u0026#34; weight = 10 还可以向每个作者页面添加更多详细信息，以便它显示一些个人简介、链接或任何信息。\nmkdir -p content/authors/作者名称 touch content/authors/作者名称/_index.md # 文件内容 --- title: \u0026#34;authors\u0026#34; --- my name is authors 文章前置中引用作者信息 --- authors: - \u0026#34;小橘子Single\u0026#34; showAuthor: false # 是否显示默认作者 showAuthorsBadges : false # 是否在文章封面显示作者信息 --- 样本 下面的示例显示了默认网站作者已开启且文章有多个作者的示例。 SFTP 配置 165 字\u0026middot; loading \u0026middot; loading 小橘子Single sftp SFTP是基于SSH（Secure Shell）的协议，用于在客户端和服务器之间进行安全的文件传输。 ","date":"January 1, 1","externalUrl":"","permalink":"/docs/theme/authors/","section":"Docs","summary":"网站主题多个作者配置教程","title":"Blowfish主题设置多名作者","type":"docs"},{"content":" 声明冲突：同一个样式，多次应用到同一个元素。 层叠：解决声明冲突的过程，浏览器自动处理。(权重计算)\n比较重要性 重要性从高到低：\n作者样式表中的 !important 样式 作者样式表：开发者书写的样式 作者样式表中的普通样式 浏览器默认样式表中的样式。 比较特殊性 总体规划：看选择器，选择器选中的范围越小，越特殊 具体规则：通过选择器，计算出一个4位数（xxxx） 千位：如果是内联样式，记1，否则记0 百位：等于选择器中所有ID选择器的数量。 十位：等于选择器中所有类选择器、属性选择器、伪类选择器的数量。 个位：等于选择器中所有元素选择器，伪元素选择器的数量。 元素选择器、伪类选择器\u0026gt;类选择器class、属性选择器、伪类选择器\u0026gt;id选择器\u0026gt;元素内联样式\n案例1 \u0026lt;style\u0026gt; a { /* color: red !important; */ color: red; text-decoration: none; font-style: italic; } #mylink { /* 没有内联: 0 id：1 类|属性|伪类：0 元素：0 */ /* 0100 书写靠后则应用靠后的样式 */ color: #000; } #id { /* 0100 */ color: aqua; } .selected { color: #fff; background-color: red; } .active { /* 0010 */ color: blue; } \u0026lt;/style\u0026gt; \u0026lt;body\u0026gt; \u0026lt;a href=\u0026#34;\u0026#34;\u0026gt;Lorem.\u0026lt;/a\u0026gt; \u0026lt;a href=\u0026#34;\u0026#34;\u0026gt;Tempora?\u0026lt;/a\u0026gt; \u0026lt;a href=\u0026#34;\u0026#34; \u0026gt;Beatae.\u0026lt;/a\u0026gt; \u0026lt;a href=\u0026#34;\u0026#34; id=\u0026#34;mylink\u0026#34; class=\u0026#34;selected\u0026#34; style=\u0026#34;color: chocolate;\u0026#34;\u0026gt;Quam.\u0026lt;/a\u0026gt; \u0026lt;a href=\u0026#34;\u0026#34; id=\u0026#34;id\u0026#34; class=\u0026#34;active\u0026#34;\u0026gt;Doloribus.\u0026lt;/a\u0026gt; \u0026lt;a href=\u0026#34;\u0026#34;\u0026gt;Fugiat!\u0026lt;/a\u0026gt; \u0026lt;a href=\u0026#34;\u0026#34;\u0026gt;Molestiae.\u0026lt;/a\u0026gt; \u0026lt;a href=\u0026#34;\u0026#34;\u0026gt;Est.\u0026lt;/a\u0026gt; \u0026lt;a href=\u0026#34;\u0026#34;\u0026gt;Animi.\u0026lt;/a\u0026gt; \u0026lt;a href=\u0026#34;\u0026#34;\u0026gt;Quidem.\u0026lt;/a\u0026gt; \u0026lt;/body\u0026gt; 案例2 \u0026lt;style\u0026gt; a { /* 没有内联：0 没有ID：0 没有类，属性，伪类：0 1个元素：a */ /* 0001 */ color: red; } div ul a { /* 没有内联：0 没有ID：0 没有类，属性，伪类：0 3个元素：div ul a */ /* 所以是 0003 */ color: aqua; } #mydiv #myul a{ /* 0201 */ /* 没有内联：0 */ color: blueviolet; } #mydiv #myul .mylink { /* 没有内联：0 两个ID：2 1个类：.mylink 没有元素也没有伪元素：0 */ /* 所以是 0210 */ color: green; } #mydiv #myul a:link { /* 没有内联：0 两个ID：2 1个伪类 :link 1个元素 a */ /* 所以是 0211 */ color: chocolate; } \u0026lt;/style\u0026gt; \u0026lt;body\u0026gt; \u0026lt;div id=\u0026#34;mydiv\u0026#34;\u0026gt; \u0026lt;ul id=\u0026#34;myul\u0026#34;\u0026gt; \u0026lt;li id=\u0026#34;myli\u0026#34;\u0026gt; \u0026lt;a href=\u0026#34;https://163.com\u0026#34; class=\u0026#34;mylink\u0026#34;\u0026gt;举个例子\u0026lt;/a\u0026gt; \u0026lt;/li\u0026gt; \u0026lt;/ul\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/body\u0026gt; 比较源次序 代码书写靠后的胜出。 应用 重置样式表 重置样式表：书写一些作者样式，覆盖浏览器的默认样式。 重置样式表 -》 浏览器的默认样式 常见的重置样式表：normalize.css、 reset.css、 meyer.css 重置样式表reset.css /* http://meyerweb.com/eric/tools/css/reset/ v2.0 | 20110126 License: none (public domain) */ dy, div, span, applet, object, iframe, h1, h2, h3, h4, h5, h6, p, blockquote, pre, a, abbr, acronym, address, big, cite, code, del, dfn, em, img, ins, kbd, q, s, samp, small, strike, strong, sub, sup, tt, var, b, u, i, center, dl, dt, dd, ol, ul, li, fieldset, form, label, legend, table, caption, tbody, tfoot, thead, tr, th, td, article, aside, canvas, details, embed, figure, figcaption, footer, header, hgroup, menu, nav, output, ruby, section, summary, time, mark, audio, video { margin: 0; padding: 0; border: 0; font-size: 100%; font: inherit; vertical-align: baseline; } /* HTML5 display-role reset for older browsers */ article, aside, details, figcaption, figure, footer, header, hgroup, menu, nav, section { display: block; } body { line-height: 1; } ol, ul { list-style: none; } blockquote, q { quotes: none; } blockquote:before, blockquote:after, q:before, q:after { content: \u0026#39;\u0026#39;; content: none; } table { border-collapse: collapse; border-spacing: 0; } 爱恨法则 link \u0026gt; visited \u0026gt; hover \u0026gt; active\n","date":"January 1, 1","externalUrl":"","permalink":"/docs/css/day04/","section":"Docs","summary":"解决声明冲突的原理讲解","title":"4.层叠","type":"docs"},{"content":" 选择器: 帮助你精准的选中想要的元素\n简单选择器 ID选择器 -id对应的值: #id值{}\n#str{ color: red; } \u0026lt;p id=\u0026#34;str\u0026#34;\u0026gt;Lorem ipsum dolor sit amet.\u0026lt;/p\u0026gt; 元素选择器 元素: 元素{} p { color: blue; } \u0026lt;p\u0026gt;Lorem ipsum dolor sit amet.\u0026lt;/p\u0026gt; 类选择器 类对应的值: .class{} .left { background: coral; color: #fff; } \u0026lt;div class=\u0026#34;left\u0026#34;\u0026gt;Lorem.\u0026lt;/div\u0026gt; 通配符选择器 *: 表示选中所有元素 *{} *{ color: red; } \u0026lt;div\u0026gt;Lorem.\u0026lt;/div\u0026gt; \u0026lt;p\u0026gt;Lorem.\u0026lt;/p\u0026gt; \u0026lt;h1\u0026gt;Lorem.\u0026lt;/h1\u0026gt; 属性选择器 匹配元素的属性: [属性=\u0026quot;\u0026quot;]{} [href=\u0026#34;https://www.baidu.com\u0026#34;]{ color: green; } \u0026lt;a href=\u0026#34;https://www.baidu.com\u0026#34;\u0026gt;百度\u0026lt;/a\u0026gt; 伪类选择器: 选中某些元素的某种状态 必须要按照顺序进行排列。 爱恨法则：love hate link: 超链接未访问时的状态。 visited： 超链接访问过后的状态。 hover： 鼠标悬停状态。 active: 激活状态，鼠标按下状态。 a:link{ color: cadetblue; } a:visited{ color: fuchsia; } a:hover{ color: red; } a:active{ color: chocolate; } # a 表示要给a元素添加 伪元素选择器: 可以生成子元素 before after span::before{ /* 选中span元素会生成一个子元素，可以理解为生成一个before元素 */ content: \u0026#34;《\u0026#34;; /* 子元素中的内容 */ color: red; /* 颜色 */ } span::after{ content: \u0026#34;》\u0026#34;; color: red; } \u0026lt;p\u0026gt; 快来和我一起学习\u0026lt;span\u0026gt;HTML和CSS\u0026lt;/span\u0026gt;吧! \u0026lt;/p\u0026gt; 选择器的组合 并且 \u0026ndash; . 使用.链接元素和属性 p.red{ color: red; } \u0026lt;p\u0026gt; Lorem ipsum, dolor sit amet consectetur adipisicing elit. Maiores, facere velit. Nihil voluptates eum, earum ad dolor provident iure sit reprehenderit aliquid quis dolorem dolore veniam impedit quos explicabo id! \u0026lt;/p\u0026gt; \u0026lt;p class=\u0026#34;red\u0026#34;\u0026gt; Lorem ipsum dolor sit amet consectetur adipisicing elit. Adipisci quaerat minima, aspernatur natus eius nam debitis voluptates nesciunt possimus provident reprehenderit suscipit eaque quisquam consectetur illo quod vero molestias temporibus. \u0026lt;/p\u0026gt; 后代元素 \u0026ndash; 空格 使用空格连接父元素class属性和后代元素 .red li{ color: #008c8c; } \u0026lt;div class=\u0026#34;red\u0026#34;\u0026gt; \u0026lt;p\u0026gt; Lorem ipsum dolor sit amet consectetur adipisicing elit. Adipisci quaerat minima, aspernatur natus eius nam debitis voluptates nesciunt possimus provident reprehenderit suscipit eaque quisquam consectetur illo quod vero molestias temporibus. \u0026lt;/p\u0026gt; \u0026lt;ul\u0026gt; \u0026lt;li\u0026gt;Lorem.\u0026lt;/li\u0026gt; \u0026lt;li\u0026gt;Earum!\u0026lt;/li\u0026gt; \u0026lt;li\u0026gt;Quas.\u0026lt;/li\u0026gt; \u0026lt;li\u0026gt;Nobis.\u0026lt;/li\u0026gt; \u0026lt;li\u0026gt;Accusamus.\u0026lt;/li\u0026gt; \u0026lt;/ul\u0026gt; \u0026lt;/div\u0026gt; ------------------------------------------------- .abc .bcd{ color: red; } \u0026lt;div class=\u0026#34;abc\u0026#34;\u0026gt; \u0026lt;p\u0026gt;Lorem.\u0026lt;/p\u0026gt; \u0026lt;p class=\u0026#34;bcd\u0026#34;\u0026gt;Nam.\u0026lt;/p\u0026gt; \u0026lt;p\u0026gt;Eius.\u0026lt;/p\u0026gt; \u0026lt;/div\u0026gt; 子元素 \u0026ndash; \u0026gt; 使用\u0026gt;链接子元素 div\u0026gt;ul\u0026gt;li{ color: red; } div\u0026gt;ul li { color: red; } div li{ color: red; } \u0026lt;div\u0026gt; \u0026lt;ul\u0026gt; \u0026lt;li\u0026gt;Lorem.\u0026lt;/li\u0026gt; \u0026lt;li\u0026gt;Nisi!\u0026lt;/li\u0026gt; \u0026lt;li\u0026gt;In!\u0026lt;/li\u0026gt; \u0026lt;/ul\u0026gt; \u0026lt;/div\u0026gt; 相邻兄弟元素 \u0026ndash; + 使用+链接相邻的兄弟元素 .special{ color: red; } .special+li{ color: greenyellow; } \u0026lt;div\u0026gt; \u0026lt;ul\u0026gt; \u0026lt;li\u0026gt;Lorem.\u0026lt;/li\u0026gt; \u0026lt;li\u0026gt;Consequuntur!\u0026lt;/li\u0026gt; \u0026lt;li\u0026gt;Officia.\u0026lt;/li\u0026gt; \u0026lt;li class=\u0026#34;special\u0026#34;\u0026gt;Reiciendis!\u0026lt;/li\u0026gt; \u0026lt;li\u0026gt;Ipsum!\u0026lt;/li\u0026gt; \u0026lt;li\u0026gt;Tempore.\u0026lt;/li\u0026gt; \u0026lt;li\u0026gt;Consequuntur?\u0026lt;/li\u0026gt; \u0026lt;li\u0026gt;Voluptatibus?\u0026lt;/li\u0026gt; \u0026lt;li\u0026gt;Totam?\u0026lt;/li\u0026gt; \u0026lt;li\u0026gt;Explicabo.\u0026lt;/li\u0026gt; \u0026lt;/ul\u0026gt; \u0026lt;ul\u0026gt; \u0026lt;li\u0026gt;Lorem.\u0026lt;/li\u0026gt; \u0026lt;li\u0026gt;Consequuntur!\u0026lt;/li\u0026gt; \u0026lt;li\u0026gt;Officia.\u0026lt;/li\u0026gt; \u0026lt;li class=\u0026#34;special\u0026#34;\u0026gt;Reiciendis!\u0026lt;/li\u0026gt; \u0026lt;li\u0026gt;Ipsum!\u0026lt;/li\u0026gt; \u0026lt;li\u0026gt;Tempore.\u0026lt;/li\u0026gt; \u0026lt;li\u0026gt;Consequuntur?\u0026lt;/li\u0026gt; \u0026lt;li\u0026gt;Voluptatibus?\u0026lt;/li\u0026gt; \u0026lt;li\u0026gt;Totam?\u0026lt;/li\u0026gt; \u0026lt;li\u0026gt;Explicabo.\u0026lt;/li\u0026gt; \u0026lt;/ul\u0026gt; \u0026lt;/div\u0026gt; 兄弟元素 \u0026ndash; ~ 使用~链接兄弟元素 .special{ color: red; } .special~li{ color: aqua; } \u0026lt;div\u0026gt; \u0026lt;ul\u0026gt; \u0026lt;li\u0026gt;Lorem.\u0026lt;/li\u0026gt; \u0026lt;li\u0026gt;Minima.\u0026lt;/li\u0026gt; \u0026lt;li\u0026gt;Animi.\u0026lt;/li\u0026gt; \u0026lt;li class=\u0026#34;special\u0026#34;\u0026gt;Modi.\u0026lt;/li\u0026gt; \u0026lt;li\u0026gt;Laudantium.\u0026lt;/li\u0026gt; \u0026lt;li\u0026gt;Aliquam?\u0026lt;/li\u0026gt; \u0026lt;li\u0026gt;Eligendi.\u0026lt;/li\u0026gt; \u0026lt;li\u0026gt;Fuga.\u0026lt;/li\u0026gt; \u0026lt;li\u0026gt;Iusto.\u0026lt;/li\u0026gt; \u0026lt;li\u0026gt;Blanditiis!\u0026lt;/li\u0026gt; \u0026lt;/ul\u0026gt; \u0026lt;ul\u0026gt; \u0026lt;li\u0026gt;Lorem.\u0026lt;/li\u0026gt; \u0026lt;li\u0026gt;Labore?\u0026lt;/li\u0026gt; \u0026lt;li\u0026gt;Distinctio.\u0026lt;/li\u0026gt; \u0026lt;li class=\u0026#34;special\u0026#34;\u0026gt;Libero!\u0026lt;/li\u0026gt; \u0026lt;li\u0026gt;Rerum.\u0026lt;/li\u0026gt; \u0026lt;li\u0026gt;Necessitatibus?\u0026lt;/li\u0026gt; \u0026lt;li\u0026gt;Magnam!\u0026lt;/li\u0026gt; \u0026lt;li\u0026gt;Quo.\u0026lt;/li\u0026gt; \u0026lt;li\u0026gt;Incidunt.\u0026lt;/li\u0026gt; \u0026lt;li\u0026gt;Rerum.\u0026lt;/li\u0026gt; \u0026lt;/ul\u0026gt; \u0026lt;/div\u0026gt; 选择器的并列 多个选择器,用逗号,分隔 .special{ color: red; } .special~li,p{ color: blueviolet; } \u0026lt;div\u0026gt; \u0026lt;ul\u0026gt; \u0026lt;li\u0026gt;Lorem.\u0026lt;/li\u0026gt; \u0026lt;li\u0026gt;Minima.\u0026lt;/li\u0026gt; \u0026lt;li\u0026gt;Animi.\u0026lt;/li\u0026gt; \u0026lt;li class=\u0026#34;special\u0026#34;\u0026gt;Modi.\u0026lt;/li\u0026gt; \u0026lt;li\u0026gt;Laudantium.\u0026lt;/li\u0026gt; \u0026lt;li\u0026gt;Aliquam?\u0026lt;/li\u0026gt; \u0026lt;li\u0026gt;Eligendi.\u0026lt;/li\u0026gt; \u0026lt;li\u0026gt;Fuga.\u0026lt;/li\u0026gt; \u0026lt;li\u0026gt;Iusto.\u0026lt;/li\u0026gt; \u0026lt;li\u0026gt;Blanditiis!\u0026lt;/li\u0026gt; \u0026lt;/ul\u0026gt; \u0026lt;ul\u0026gt; \u0026lt;li\u0026gt;Lorem.\u0026lt;/li\u0026gt; \u0026lt;li\u0026gt;Labore?\u0026lt;/li\u0026gt; \u0026lt;li\u0026gt;Distinctio.\u0026lt;/li\u0026gt; \u0026lt;li class=\u0026#34;special\u0026#34;\u0026gt;Libero!\u0026lt;/li\u0026gt; \u0026lt;li\u0026gt;Rerum.\u0026lt;/li\u0026gt; \u0026lt;li\u0026gt;Necessitatibus?\u0026lt;/li\u0026gt; \u0026lt;li\u0026gt;Magnam!\u0026lt;/li\u0026gt; \u0026lt;li\u0026gt;Quo.\u0026lt;/li\u0026gt; \u0026lt;li\u0026gt;Incidunt.\u0026lt;/li\u0026gt; \u0026lt;li\u0026gt;Rerum.\u0026lt;/li\u0026gt; \u0026lt;/ul\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;p\u0026gt;Lorem ipsum dolor sit amet consectetur adipisicing.\u0026lt;/p\u0026gt; \u0026lt;p\u0026gt;Provident ullam voluptatem amet molestias cupiditate dolore?\u0026lt;/p\u0026gt; \u0026lt;p\u0026gt;Laboriosam eaque cum necessitatibus, iure explicabo hic.\u0026lt;/p\u0026gt; ","date":"January 1, 1","externalUrl":"","permalink":"/docs/css/day03/","section":"Docs","summary":"选择器的用法案例","title":"3.选择器","type":"docs"},{"content":" color（文字颜色） 元素内部的文字颜色. 预设值：定义好的单词 三原色，色值：光学三原色（红、绿、蓝），每个颜色可以0-255之间的数字来表达。\nrgb表示法: rgb(0,0,0) # rgb 表示法： color: rgb(0,255,0) ## rgb 代表红绿蓝，数值越大颜色越深。当三个数为0时，则黑色，当三个数为255时，则白色。 hex(16进制)表示法: #000000 可简写为: #000 #红绿蓝 color: #008c8c 淘宝红：#ff4400,#f40 黑色: #000000, #000 白色：#ffffff, #fff 红：#ff0000, #f00 绿：#00ff00, #0f0 蓝：#0000ff, #00f 紫：#ff00ff,#f0f 青：#00ffff,#0ff 黄：#ffff00,#ff0 灰色：#cccccc ,#ccc background-color（背景颜色） 元素背景颜色 font-size（字体大小） 元素内部文字的尺寸大小 px: 像素，简单的理解为文字的高度占多少个像素 em: 相对单位。相对于父元素的字体大小。3em,表示父元素字体大小的3倍像素。 每个元素必须有字体大小，如果没有声明，则直接使用父元素的字体大小，如果没有父元素（HTML），则使用基准字号。 基准字号可以从浏览器设置中查询。computed中查找font-zise。 user agent, UA, 用户代理（浏览器 有默认的样式）\nfont-weight（字体粗细） 文字粗细程度，可以取值数字，可以取值为预设值（单词） strong元素，默认加粗。表示重要、不可忽略的内容。 font-weight: bold # 加粗 700 font-weight: normal # 默认值 font-family（字体种类） 文字类型：字体类型，例如：宋体，微软雅黑 必须用户计算机中存在的字体才会有效果。 使用多个字体，以匹配不同环境的 sans-serif: 非衬线字体。字体的边缘没有修饰。通用字体，用于兼容老的计算机字体。 font-family: arial,console,宋体，微软雅黑,sans-seif font-style（字体倾斜） 字体样式，通常用它设置斜体 i 元素（影响语音阅读）：默认样式，是倾斜字体；实际使用中，通常用它表示一个图标（icon） em元素：表示强调的内容 font-style: italic text-decoration（文本修饰） 文本修饰，给文本加线。 del元素：错误的内容。 s元素：过期的内容。 text-decoration: line-through line-through：在字体中间穿过一条线。穿过文字 underline: 在字体下方加一条线。 overline: 在字体上方加一条线. none: 表示没有 text-indent（文本缩进） 首行文本缩进 px: 适用于英文 em: 适用于中文，2em 缩进2个字 line-height（行高） 每行文本的高度，该值越大，每行文本的距离越大。 设置行高为容器的高度可以让单行文本垂直居中。 行高设置为纯数字，表示相对于当前元素的字体大小。 \u0026lt;style\u0026gt; p { background: #008c8c; color: #fff; height: 50px; line-height: 50px; } \u0026lt;/style\u0026gt; \u0026lt;p\u0026gt; Lorem ipsum dolor sit. \u0026lt;p\u0026gt; width（元素容器宽度） 宽度 px em height（元素容器高度） 高度 px em letter-space（文字间隙） 文字之间的间隙隙 px em text-align（文本排列方式） 元素内部文字的水平排列方式 left：水平靠左排列 center：水平居中排列 right：水平靠右排列 ","date":"January 1, 1","externalUrl":"","permalink":"/docs/css/day02/","section":"Docs","summary":"常见的样式声明及用例","title":"2.常见的样式声明","type":"docs"},{"content":" 术语解释 css规则 = 选择器 + 声明块 \u0026lt;style\u0026gt; /* CSS规则 */ h1{ /* 选择器 */ color: red; /* 声明(属性) */ background-color: lightblue; /* 声明 */ text-align: center; /* 声明(属性) */ } \u0026lt;/style\u0026gt; \u0026lt;body\u0026gt; \u0026lt;h1\u0026gt; 现在开始添加样式 \u0026lt;/h1\u0026gt; \u0026lt;/body\u0026gt; 选择器 选择器：选中元素 ID选择器：选中的是对应ID值的元素 #id值{} 元素选择器: div{} a{} h1{} p{} ... 类选择器 .class值{} \u0026lt;!-- 元素选择器 --\u0026gt; h1{ color: red; background-color: lightblue; text-align: center; } \u0026lt;!-- #ID选择器 --\u0026gt; #test{ color: blue; } \u0026lt;!-- 类选择器 --\u0026gt; .red{ color: red; } \u0026lt;!-- 类选择器 --\u0026gt; .big-center{ font-size: 3em; text-align: center; } \u0026lt;h1\u0026gt;这是1级标题\u0026lt;/h1\u0026gt; \u0026lt;p class=\u0026#34;big-center red\u0026#34;\u0026gt; Lorem ipsum dolor sit amet. \u0026lt;/p\u0026gt; \u0026lt;p id=\u0026#34;test\u0026#34;\u0026gt;Lorem ipsum dolor sit amet.\u0026lt;/p\u0026gt; \u0026lt;p class=\u0026#34;red\u0026#34;\u0026gt;Saepe odio cupiditate laborum a.\u0026lt;/p\u0026gt; 声明块 出现在大括号{}中. 声明块中包含很多声明（属性），每一个声明（属性）表达了某一方面的样式。 h1 { /* 声明块 */ color: red; background-color: lightblue; text-align: center; } css代码书写位置 内部样式表：书写在\u0026lt;style\u0026gt;元素中。放到\u0026lt;head\u0026gt;元素中告诉浏览器最先加载样式。 内联样式表，也叫元素样式表：直接书写在元素内。\u0026lt;h1 style=\u0026quot;color: red; font-size: 2em;\u0026quot;\u0026gt;内联样式\u0026lt;/h1\u0026gt; 外部样式表[推荐使用]：将样式书写到独立的CSS文件中。在\u0026lt;head\u0026gt;元素中使用\u0026lt;link\u0026gt;元素关联CSS文件的样式。 外部样式表可以解决多页面样式重复的问题。 有利于浏览器缓存，从而提高页面响应速度。 有利于代码分离（HTML 和 CSS），更容易阅读和维护。 \u0026lt;head\u0026gt; \u0026lt;link rel=\u0026#34;stylesheet\u0026#34; href=\u0026#34;css/index.css\u0026#34;\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;div class=\u0026#34;red-big-center\u0026#34;\u0026gt; Lorem ipsum dolor sit amet. \u0026lt;/div\u0026gt; \u0026lt;/body\u0026gt; CSS文件内容: css/index.css .red-big-center { color: blue; font-size: 5em; text-align: center; } ","date":"January 1, 1","externalUrl":"","permalink":"/docs/css/day01/","section":"Docs","summary":"声明样式的应用","title":"1.为网页添加样式","type":"docs"},{"content":" 关于我 网名：小橘子Single 兴趣：追剧，摄影，打游戏，刷抖音，听音乐，睡懒觉。 影视: 韩剧，国产剧喜欢古装、悬疑、科幻、犯罪、穿越、热血、言情类，还有林正英的僵尸题材的剧。hhh,妥妥的追剧达人。 摄影：拥有三台相机，一台富士XT20，一台理光GR3，一台富士拍立得mini90。目前还是摄影小白。 游戏：拥有一台Swith游戏机，有塞尔达传说- 旷野之息和王国之泪，奥德赛，路易吉鬼屋3，马里奥赛车8，分手厨房2。目前已通关旷野之息，王国之泪还在进行中。手游的话可能会玩卡牌类的，抖音小游戏砖了个砖，历史最高记录14层，这游戏费脑。 运动：嘿嘿，和朋友去逛街，公园博物馆散步摄影算不算是一项运动呢？ 正在做的事：考驾照，练书法，折腾自己的网站。 关于博客 创建到现在有3年了，期间经历了几次迁移。 使用Hugo搭建，托管在GitHub Pages上。 网站主题使用blowfiwsh，喜欢卡片式的布局方式。 初衷是建立一个网站，记录与分享。 ","date":"January 1, 1","externalUrl":"","permalink":"/about/me/","section":"关于","summary":"关于我的一些资料","title":"关于我","type":"about"},{"content":" 背景 最近使用MAC终端连接服务器，发现在终端上使用不了rz/rz命令，导致无法传输文件。因此想到了SFTP工具。 SFTP是基于SSH（Secure Shell）的协议，用于在客户端和服务器之间进行安全的文件传输。 SFTP本质上是一种命令行工具，它需要通过终端或者命令行界面与服务器进行交互。 完美解决 Mac系统终端文件与服务器文件传输问题。 1. 安装OpenSSH服务 可以检查下服务器是否安装有这个服务 rpm -q openssh-server 若没有安装，可使用下面命令安装 yum -y install openssh-server 2. 配置SSH服务 编辑SSH服务的配置文件：/etc/ssh/sshd_config 将内容添加到文件末尾。 vim /etc/ssh/ssh_config # 指定使用哪个子系统来处理SFTP连接。internal-sftp 是openssh提供的内部sftp子系统 Subsystem sftp internal-sftp # 配置传送目录和所属用户 Match Group sftpusers # 指定SFTP用户的根目录 %h 代表占位符，表示指定用户家目录，%u 代表占位符，表示指定用户名 ChrootDirectory /home/sftp/%u # 用于控制是否启用X11转发,X11转发是一种通过SSH连接远程主机并在本地显示图形界面应用程序的功能。 X11Forwarding no # 用于控制是否允许TCP端口转发,TCP端口转发是SSH协议中的一项功能，它允许通过SSH隧道在远程主机和本地主机之间转发TCP网络连接。 AllowTcpForwarding no # 强制执行指定的命令。当设置ForceCommand为internal-sftp时，表示强制使用内部的SFTP子系统处理所有SSH连接请求。 ForceCommand internal-sftp ---------------------------------------------------------------------------------------------------------- # 指定SSH端口,建议修改SSH默认端口 Port 2222 3. 创建SFTP用户组 groupadd sftpuser 4.创建SFTP管理目录 mkdir /home/sftpuser chmod 0755 /home/sftpuser 5. 创建SFTP用户 useradd -g sftpusers -d /home/sftp/\u0026lt;username\u0026gt; -p $(openssl passwd -1 \u0026#39;your passwd\u0026#39;) -s /sbin/nologin \u0026lt;username\u0026gt; # -g 指定用户组 # -d 指定用户主目录 # -p 设置用户加密密码 # 使用 openssl passwd -1 生成一个基于MD5加密的密码 6. 设置SFTP用户主目录的权限 权限直接影响SFTP用户连接后的权限 chown root:sftpuser /home/sftp/\u0026lt;username\u0026gt; chmod 0755 /home/sftp/\u0026lt;username\u0026gt; 设置一个可以操作的子目录 mkdir /home/sftp/\u0026lt;username\u0026gt;/putfile chmod 0700 /home/sftp/\u0026lt;username\u0026gt;/putfile chown \u0026lt;username\u0026gt;:sftp /home/sftp/\u0026lt;username\u0026gt;/putfile 当然啦，你可以不用像我这样操作，目录可以换成其他的。\n7. 重启SSH服务 systemctl restart sshd 8. 测试验证 Mac连接SFTP服务 sftp -oPort=2222 \u0026lt;username\u0026gt;@host # -o: 指定服务器端口号，若修改了端口号需要这个选项。 # username: 服务器中创建的sftp用户 # host: 主机名称或IP地址。 连接成功后使用ls命令查看当前目录的文件，能看到文件就代表连接成功。\nMac下载文件不指定路径的话，默认下载路径为你当前账号登录Mac系统的路径。\nsftp 常用命令 ls: 显示远程目录列表 pwd: 显示远程当前所在目录 put: 上传文件。put 本机路径 远程路径 get: 下载文件。get 远程路径 本机路径 bye/quit: 退出sftp cp: 复制远程文件 mkdir: 创建远程目录 rmdir: 删除远程目录 rm: 删除远程文件 ","date":"January 1, 1","externalUrl":"","permalink":"/docs/linux/sftp/","section":"Docs","summary":"SFTP是基于SSH（Secure Shell）的协议，用于在客户端和服务器之间进行安全的文件传输。","title":"SFTP 配置","type":"docs"},{"content":" 前言 市面上有很多开源的静态站点，最早使用的是 WordPress, Typecho, 有好看的主题，有后台管理，可以在线编辑发布，对新手非常友好。就是比较折腾，nginx+php+mysql部署 后期维护比较麻烦，也需要花费一笔费用在服务器上。 后来换成了 Hexo, 免费，开源，无需服务器，托管到GitHub上就行。由于hexo基于nodejs,很多依赖关系导致的bug无从修复，至此放弃。 一直探索，直至发现了 Hugo Hugo 介绍 Hugo 是开源的静态站点生成器之一，使用go语言开发，将Markdown文件转变成html，是世界上最快的网站搭建框架。 纯静态页面，访问速度快，而且安全。不足的地方就是跟用户的交互功能需要借助第三方插件来完成，例如评论，访问统计等。 完全跨平台，可在 macOS、Linux、Windows 等上轻松安装与使用。 博客安装思路 了解系统的终端命令使用，不同系统的终端命令也不是完全相同。 例如：ls、cd 安装Git，会 Git 命令的基本使用。 有 GitHub账户, 以及以github账户开头的github仓库，例如: username.github.io, username必须是 github 账户名称。 了解 GitHub Action 持续集成和持续交付平台，以及基本语法。 默认仓库主分支名称为main,还需创建一个分支，命名为 gh-pages 切换到这个分支上。 Hugo 安装 我这边使用Linux系统安装，不同操作系统的安装可以参考 Hugo Install, 以及想要安装的 Hugo Version 我安装的Hugo版本为 v0.100.0 hugo new site myblog 查看Hugo是否安装成功，可以使用以下命令, 有版本号出现就代表安装成功。 hugo-100 version hugo v0.100.0-27b077544d8efeb85867cb4cfb941747d104f765 linux/amd64 BuildDate=2022-05-31T08:37:12Z VendorInfo=gohugoio Blowfish 主题安装 这里 Hugo Theme 有很多主题可选择任意一个喜欢的应用到网站中。 我这边选的是 Blowfish, 这个主题对Hugo的版本要求为 \u0026gt; v0.87.0 # 进入博客目录下 cd myblog # 初始化git git init # 下载主题 git submodule add -b main https://github.com/nunocoracao/blowfish.git themes/blowfish # 若下载失败可以换成 git clone 尝试 git clone https://github.com/nunocoracao/blowfish.git themes/blowfish 配置网站url,将主题目录下的配置文件config 复制到当前位置。cp -r theme/blowfish/exampleSite/config . 这个config目录下默认有6个配置文件，我们只需要配置config.toml的baseURL参数即可 cd config/_default/ vim config.toml baseURL = \u0026#34;https://yourname.github.io/\u0026#34; # 网站根目录的url,将你的域名，或者是GitHub Pages 指定的仓库名写上即可。 # googleAnalytics = \u0026#34;G-PEDMYR1V0K\u0026#34; # 这个参数需要注释掉。 网站构建编译 在推送博客前可以先预览构建效果，满意之后再进行推送。这样可以避免一些效果不达标的结果，减少推送次数 hugo server -D -F --minify --bind=0.0.0.0 # 这样就可以使用本机外网ip进行访问了，htp://ipaddr:1313 达到预期后构建编译，此时，public目录下就产生了网页静态文件。 hugo --minify Github Pages 介绍 GitHub Pages 是从 GitHub 上的存储库获取HTML、CSS和JavaScript文件，可以选择通过构建过程运行文件，然后发布网站。 Github Actions 介绍 GitHub Actions 是一个持续集成和持续交付 (CI/CD) 平台，可以自动化构建、测试和部署管道 创建工作流程来构建和测试存储库的每个拉取请求，或将合并的拉取请求部署到生产环境 推送博客至GitHub 推送前的准备工作，需要申请两个秘钥，一个用于ssh免密登录github，一个授权github Action 仓库读取的秘钥。 因为本地Git与GitHub之间数据传输是通过ssh秘钥进行的，创建秘钥并关联GitHub仓库 # 关联远程github账户 git config --global user.email \u0026#34;your@example.com\u0026#34; # github邮件 git config --global user.name \u0026#34;Your UserName\u0026#34; # GitHub账户名称 # 创建秘钥文件 ssh-keygen -t rsa -b 2048 -C \u0026#34;youremail@example.com\u0026#34; -f ~/.ssh/filename # 会产生一个公钥和一个私钥文件放在 ~/.ssh/ filename.pub # 公钥 filename.rsa # 私钥 # 回到GitHub账户，右上角点击头像---\u0026gt;Settings---\u0026gt;然后找到 SSH and GPG keys ---\u0026gt;点击 New SSH key # title 随意写，自己清楚就行，将复制的内容粘贴到key中，Add SSH key即可。 验证是否可以免密登录github ssh-T git@github.com Hi UserName/UserName.github.io! You\u0026#39;ve successfully authenticated, but GitHub does not provide shell access. 配置授权 github Action 秘钥读取仓库的权限。 在 GitHub账户上，点击头像\u0026mdash;\u0026gt; Settings \u0026mdash;\u0026gt; Developer settings \u0026mdash;\u0026gt; Personal access tokens \u0026mdash;\u0026gt; Generate new key \u0026mdash;\u0026gt; Tokens (classic)\nnote描述：就是写token是干嘛。 然后选择个人令牌的访问权限，按需选择即可\n我的选择范围： [repo admin:repo_hook delete_repo]\n生成一个新的令牌，需要注意，新令牌的token只展示一次，需要复制下来\n进入yourname.github.io仓库 \u0026mdash;\u0026gt; Settings \u0026mdash;\u0026gt; Secrets and variables \u0026mdash;\u0026gt; Action \u0026mdash;\u0026gt; New repository secret\nname: 密钥名称 ACCESS_TOKEN secret： 将刚刚复制的token粘贴到这里 添加密钥(add secret)\n配置自动化工作流程，使博客每次更新推送时可自动触发CI/CD 自动部署网站。 mkdir -p .github/worker touch .github/worker/gh-pages.yml # gh-pages.yaml 文件内容 name: GitHub Pages on: push: branches: - main jobs: build-deploy: runs-on: ubuntu-latest concurrency: group: ${{ github.workflow }}-${{ github.ref }} steps: - name: Checkout uses: actions/checkout@v3 with: submodules: true fetch-depth: 0 - name: Setup Hugo uses: peaceiris/actions-hugo@v2 with: hugo-version: \u0026#34;latest\u0026#34; - name: Build run: hugo --minify - name: Deploy uses: peaceiris/actions-gh-pages@v3 if: ${{ github.ref == \u0026#39;refs/heads/main\u0026#39; }} with: github_token: ${{ secrets.BLOWFISH_TOKEN }} # 授权秘钥填写位置 publish_branch: gh-pages publist_dir: ./public cname: yourdomain 推送至GitHub git remote add origin git@github.com:username/uername.github.io.git # 关联远程仓库 git add . # 提交到暂存库，反悔可 git reset 撤销 git commit -m \u0026#34;message\u0026#34; # 提交至本地仓库，message 就是写这个版本做了什么修改 git push origin main # 推送至远程仓库。 ","date":"January 1, 1","externalUrl":"","permalink":"/docs/theme/threshold/","section":"Docs","summary":"使用Linux结合GitHub+hugo+blowfish搭建个人博客网站","title":"搭建个人博客","type":"docs"},{"content":" 不蒜子统计 code 今天更新了网站主页访客总数统计，使用不蒜子进行统计。\n不蒜子文档\n不蒜子的极简写法\n本站总访问量\u0026lt;span id=\u0026#34;busuanzi_value_site_pv\u0026#34;\u0026gt;\u0026lt;/span\u0026gt;次 本站访客数\u0026lt;span id=\u0026#34;busuanzi_value_site_uv\u0026#34;\u0026gt;\u0026lt;/span\u0026gt;人次 本文总阅读量\u0026lt;span id=\u0026#34;busuanzi_value_page_pv\u0026#34;\u0026gt;\u0026lt;/span\u0026gt;次 从主题 copy head.html 和 footer.html 文件到 layouts/partials/ cp theme/blowfish/layouts/partials/head.html layouts/partials/ cp theme/blowfish/layouts/partials/footer.html layouts/partials/ 修改head.html文件 # 编辑layouts/partials/head.html文件，在 Firebase 两个 end 后边行添加以下代码 150 {{/* busuanzi */}} 151 {{ if .IsHome }} 152 {{ if .Params.busuanzi | default (.Site.Params.busuanzi.enable | default false) }} 153 \u0026lt;script async src=\u0026#34;//busuanzi.ibruce.info/busuanzi/2.3/busuanzi.pure.mini.js\u0026#34;\u0026gt;\u0026lt;/script\u0026gt; 154 \u0026lt;meta name=\u0026#34;referrer\u0026#34; content=\u0026#34;no-referrer-when-downgrade\u0026#34;\u0026gt; 155 {{ end }} 156 {{ end }} 修改footer.html文件 # 编辑layouts/partials/footer.html文件，在 Copyright 代码后边一个end 大约36行添加以下代码 38 \u0026lt;br\u0026gt; 39 {{/* busuanzi */}} 40 {{ if .IsHome }} 41 {{ if .Params.busuanzi | default (.Site.Params.busuanzi.enable | default false) }} 42 本站访客总数: \u0026lt;span id=\u0026#34;busuanzi_value_site_uv\u0026#34;\u0026gt;\u0026lt;/span\u0026gt; 43 {{ end }} 44 {{ end }} 修改主题配置文件: config/_default/params.toml\n# 在空白处添加以下代码 [busuanzi] enable = true 2024/3/26 · 0:16 · 深圳 ","date":"March 26, 2024","externalUrl":"","permalink":"/shcode/busuanzi/","section":"Shcodes","summary":"给网站添加不蒜子访问量统计","title":"Busuanzi","type":"shcode"},{"content":"","date":"March 26, 2024","externalUrl":null,"permalink":"/shcode/","section":"Shcodes","summary":"","title":"Shcodes","type":"shcode"},{"content":"","date":"March 26, 2024","externalUrl":null,"permalink":"/","section":"小橘子Single","summary":"","title":"小橘子Single","type":"page"},{"content":"","date":"March 26, 2024","externalUrl":null,"permalink":"/authors/%E5%B0%8F%E6%A9%98%E5%AD%90single/","section":"作者","summary":"","title":"小橘子Single","type":"authors"},{"content":"","date":"March 26, 2024","externalUrl":null,"permalink":"/authors/","section":"作者","summary":"","title":"作者","type":"authors"},{"content":" shortcode code Alert 自定义一些alert简码 颜色调板 {{\u003c alert icon=\"pencli\" iconColor=\"#1d3557\" cardColor=\"#7775CA\" \u003e}} \"注意\" {{\u003c /alert \u003e}} {{\u003c alert icon=\"list\" iconColor=\"#1d3557\" cardColor=\"#7EC0F0\" \u003e}} \"摘要\" {{\u003c /alert \u003e}} {{\u003c alert icon=\"circle-info\" iconColor=\"#1d3557\" cardColor=\"#7EE0F0\" \u003e}} \"信息\" {{\u003c /alert \u003e}} {{\u003c alert icon=\"lightbulb\" iconColor=\"#1d3557\" cardColor=\"#9AE07A\" \u003e}} \"技巧\" {{\u003c /alert \u003e}} {{\u003c alert icon=\"check\" iconColor=\"#1d3557\" cardColor=\"#0CF219\" \u003e}} \"成功\" {{\u003c /alert \u003e}} {{\u003c alert icon=\"question\" iconColor=\"#1d3557\" cardColor=\"#CFF227\" \u003e}} \"问题\" {{\u003c /alert \u003e}} {{\u003c alert icon=\"triangle-exclamation\" iconColor=\"#1d3557\" cardColor=\"#F4F405\" \u003e}} \"警告\" {{\u003c /alert \u003e}} {{\u003c alert icon=\"xmark\" iconColor=\"#1d3557\" cardColor=\"#DB8A7A\" \u003e}} \"失败\" {{\u003c /alert \u003e}} {{\u003c alert icon=\"skull-crossbones\" iconColor=\"#1d3557\" cardColor=\"#E05896\" \u003e}} \"危险\" {{\u003c /alert \u003e}} {{\u003c alert icon=\"bug\" iconColor=\"#1d3557\" cardColor=\"#F15661\" \u003e}} \"Bug\" {{\u003c /alert \u003e}} {{\u003c alert icon=\"list-ol\" iconColor=\"#1d3557\" cardColor=\"#974AE8\" \u003e}} \"示例\" {{\u003c /alert \u003e}} {{\u003c alert icon=\"quote-right\" iconColor=\"#1d3557\" cardColor=\"#CBC6CF\" \u003e}} \"引用\" {{\u003c /alert \u003e}} 2024/03/23 · 19:53 · 深圳 shortcode code Alert 效果预览 注意 摘要 信息 技巧 成功 问题 警告 失败 危险 Bug 示例 引用 2024/03/23 · 19:53 · 深圳 ","date":"March 23, 2024","externalUrl":"","permalink":"/shcode/shortcode/","section":"Shcodes","summary":"主题作者提供的一些简码很自由，定义一些简码参数的编排，方便日后快速使用","title":"Shortcode","type":"shcode"},{"content":"","date":"March 19, 2024","externalUrl":null,"permalink":"/tags/friends/","section":"Tags","summary":"","title":"friends","type":"tags"},{"content":"","date":"March 19, 2024","externalUrl":null,"permalink":"/tags/","section":"Tags","summary":"","title":"Tags","type":"tags"},{"content":"","date":"March 19, 2024","externalUrl":null,"permalink":"/about/","section":"关于","summary":"","title":"关于","type":"about"},{"content":"感谢🙏 金圣皓博主提供的友联，简洁干净。\n友联把遥远的距离汇聚在一起。\nFollw me 金圣皓 我喜欢听花开的声音，更想自由地深情地呼吸 Yuepu`s Blog 保持独立思考，不急，但是不停~ 草方块 还没取正经名字的折腾怪物 The Cafe My digital home for hobbies and notes 春江花朝秋月夜 我一直在寻找着什么，寻找着某个人。 ","date":"March 19, 2024","externalUrl":null,"permalink":"/about/friends/","section":"关于","summary":"朋友们","title":"友联","type":"about"},{"content":" 执行这条命令的是希望nginx不停止服务的情况下把旧的nginx配置文件内容平滑的更新为新的配置文件内容。\nnginx -s reload 流程 因为启动nginx服务有两个进程,一个是master进程，一个是worker进程 worker 进程 是由nginx配置文件的worker_processes配置参数控制的，表示CPU处理核数 [1] 向master 进程发送 HUP 信号 [2] master 进程校验nginx配置文件语法是否正确 [3] master 进程打开新的监听端口 [4] master 进程用新的nginx配置启动新的 worker 子进程 [5] master 进程向老的 worker 子进程 发送 QUIT 信号 [6] 老的 worker 子进程关闭监听句柄，处理完当前连接后结束进程 流程图 flowchart TD a([正在运行的nginx服务]) a1[master进程\\nWorker进程] b[修改nginx配置文件] c[尝试配置,尝试打开日志文件,\\n尝试分配新的监听端口] d{是否成功} d1[回滚配置] d2[使用新的配置,新建一个Worker进程,\\n新建成功后发送一个关闭消息给旧的Worker进程] e[旧的Worker进程 收到信号后会继续服务,\\n当所有请求的客户端被服务后,旧进程关闭] f([结束]) a --\u003e|启动| a1 a --\u003e|update| b --\u003e c --\u003e d d --\u003e|否| d1 --\u003e f d --\u003e|是|d2 --\u003e e --\u003e f ","date":"March 1, 2022","externalUrl":"","permalink":"/posts/nginx-reload/","section":"笔记","summary":"记录nginx reload的过程","title":"nginx-reload原理","type":"posts"},{"content":"分享知识，点亮世界。\n","date":"March 1, 2022","externalUrl":null,"permalink":"/posts/","section":"笔记","summary":"分享知识，点亮世界。","title":"笔记","type":"posts"},{"content":" Session与Cookie详解 session 与 cookie 是什么？ session 与cookie 是属于一种会话控制技术，常用在身份识别，登录验证，数据传输等。 举个例子：就像我们去超市买东西结账的时候，我们要拿出我们的会员卡才会获取优惠.这时候，我们怎么识别这个会员卡真实有效的呢?当我们将会员号给到收银员，收银员根据我们提供的会员号，输入到系统中，系统根据这个会员号去查询，如果查询到了就证明这个会员号是真实存在的.这里的会员号就好比cookie与session.会员系统就好比服务器端，收银员就好比客户端. 为什么会用到session与cookie？ 这里有必要了解一下http应用传输协议的特点了。由于http协议是无状态的，即浏览器去请求了一个网页，这时候就是一个http请求，当服务端接收到请求之后，返回客户端需要的数据，在这过程中浏览器与服务器是建立了一个连接的。但是当服务端返回数据，客户端收到数据之后，他们的这种连接关系就断开了。下次浏览器再去发送请求的时候，又是重新建立一个连接，这两个链接没有任何关系。试想一下，当我们登录一个商场系统的时候，进入首页做了登录操作，但是我们下单或者加入购物车的时候，还需要登录，每访问一个页面就要登录，是不是很繁琐同时也是很不科学的，万一我们加入购物车的商品，我们点击下单了，下单页面要登录而且还无法正确的反馈出你下单时的那些商品。 Http特点 http协议支持客户端/服务端模式，也是一种请求/响应模式的协议。 无连接。所谓的无连接就是服务器收到了客户端的请求之后，响应完成并收到客户端的应答之后，即断开连接。限制每次的连接只处理一次请求。从而节省传输时间。 无状态。http协议对事务的处理没有记忆能力。也就意味着如果需要前面的信息，只能重传，这无形之中增加数据的传输量。这种方式某种方面上讲解放了服务器，但是却不利于客户端与服务器的连接。为了弥补这种不足，产生了两项记录http状态的技术，一个叫做Cookie,一个叫做Session 简单快捷：所谓的简单快捷是指客户端向服务器请求服务时，一般来说只需要传输请求方法和路径，就能进行访问 灵活：这里主要指的是客户端可以通过http协议传输任意类型的数据。比如传输.jpg文件、.ppt文件等等，只需要设定content-type就可以进行传输。 Session Session是指一个终端用户与交互系统进行通信的时间间隔，通常指从注册进入系统到注销退出系统之间所经过的时间。以及如果需要的话，可能还有一定的操作空间。 一个Session的概念需要包括特定的客户端，特定的服务器端以及不中断的操作时间。A用户和C服务器建立连接时所处的Session同B用户和C服务器建立连接时所处的Session是两个不同的Session。 Session的工作原理 当一个session第一次被启用时，一个独一的标识被存储于本地的cookie中. 首先使用session_start()函数，PHP从session仓库中加载已经存储的session变量。 当执行PHP脚本时，通过使用session_register()函数注册session变量。 当PHP脚本执行结束时，未被销毁的session变量会被自动保存在本地一定路径下的session库中，这个路径可以通过php.ini文件中的session.save_path指定，下次浏览网页时可以加载使用。 Session的运行原理 客户端向服务端发起请求，建立通信 服务端根据设置的Session创建指令，在服务端创建一个编号为SessionID的文件，里面的值就是Session具体的值(组成部分 变量名 | 类型 :长度:值). 服务端将创建好的sessionid编号响应给客户端，客户则将该编号存在cookie中(一般我们在浏览器存储的调试栏中会发现cookie中有一个PHPSESSID的键，这就是SessionID，当然这个名称，我可以通过设置服务端是可以改变的). 当下一次请求时，客户端将这个sessionid携带在请求中，发送给服务端，服务端根据这个sessionid来做一些业务判断. Session的存储机制 存储方式: session默认是文件存储的.我们可以通过php.ini的配置来设置存储驱动传送门。 生命周期: 当我们未设置session的生命周期时，当浏览器关闭之后存储在客户端的phpsessid自动消失，因为它是存在内存，下次建立连接的时候会重新创建一个phpsessid.之前的session，PHP会自动的根据垃圾回收机制自动删除.这里我们可以根据session_set_cookie_params($expire)函数来设置一个生命周期. Session的使用场景 用户身份识别 数据传输 登录控制(是否登录,单点登录) Session的特点: 不是线程安全的，应该避免多个线程共享同一个Session实例； Session实例是轻量级的，所谓轻量级：是指他的创建和删除不需要消耗太多资源； Session对象内部有一个缓存，被称为Hibernate第一缓存，他存放被当前工作单元中加载的对象，每个Session实例都有自己的缓存。 Session的注意事项 安全性: sessionid是按照一定的算法生成，要保证session的值唯一性和随机性 客户端禁用cookie，根据上面session的运行原理可以得出，session的存储于传送还是依赖于客户端，因此当客户端禁用cookie时，客户端是无法保存PHPSESSID的，这时候可以通过url重写或者表单来实现session的传输. Cookie cookie是远程浏览器存储数据以此追踪用户和识别用户的的机制，从实现来说，cookie是存储在客户端上的一个数据片段(即保存在客户机中的一个简单的文本文件) Cookie 客户端向服务端发起一个http请求. 服务端设置一个创建cookie的指令，响应给客户端 客户端收到服务端响应的指令，根据指令在客户端创建一个cookie 当下一次请求时，客户端携带这个cookie向服务端发送请求. 存储机制 cookie在客户端存储的形式有三种,不同的浏览器的存储机制不同，存的cookie也不同。 文件存储: 浏览器会针对不同的域，在磁盘的对应目录创建一个单独的文件，来存储该域下面的cookie值. 内存存储: 当浏览器关闭时，该cookie随之消失.根据下面的创建语法，当我们未设置过期时间时则会出现这种情况 flash存储: 这种存储方式是永久存储在磁盘中，即使通过浏览器删除一些数据都是无法删除该方式存储的cookie，如果需要删除，可能通过磁盘的方式 Cokie的应用 用户身份识别 数据传输 登录控制(是否登录、单点登录) Session与Cookie的区别 Session存储在服务端，Cookie存储在客户端。 Cookie的创建指令由服务端设置 Session的SessionID需要客户端存储 cookie与session的几个误区 客户端禁止cookie，session无法使用？ 使用url重写或者表单提交可以实现. session和cookie的安全性比较，session存在客户端安全更高? 由于cookie是存在客户端的，相对来说安全性是要低一些，不过在创建的时候可以设置$httpOnly值. 由于cookie与session是相互关联的，获取到cookie一定程度上获取到了session，同样可以操作session. cookie与session是不是在浏览器关闭的时候会消失? 这需要查看存储机制了。cookie可以存文件，内存，flash.存内存当然浏览器关闭则消失了；session由于垃圾回收机制，当在垃圾回收机制内是不会删除的，除非你代码中显示的做了删除操作. cookie是存储在客户端中，如何增加其安全性? 我们可以在设置cookie的时候，增加一些特殊参数，如客户端信息ip、浏览器信息等. 当cookie存在客户端的文件中，是不是每个浏览器获取到这个文件都可以进行操作? 要看浏览器之间对cookie的管理机制是不是一样. ","date":"January 30, 2022","externalUrl":"","permalink":"/posts/session-cookie/","section":"笔记","summary":"ession和cookie的作用","title":"session与cookie详解","type":"posts"},{"content":" 系统 不同系统间存在差异 例如：centos系统7和8 ]# cat /etc/centos-release CentOS Linux release 7.6.1810 (Core) ]# ls /etc/hosts.deny /etc/hosts.deny # 可以理解为ssh登录黑名单文件，8版本没有 # 文件记录格式： sshd: ipaddr /var/log/secure 记录ssh登录失败的IP，过滤100条看看 ]# tail -n 100 /var/log/secure | awk \u0026#39;/Failed password/{print $0}\u0026#39; Mar 18 23:04:37 centos sshd[31222]: Failed password for invalid user zywang from 165.232.124.55 port 48182 ssh2 Mar 18 23:04:37 centos sshd[31225]: Failed password for invalid user zyx from 165.232.124.55 port 48214 ssh2 Mar 18 23:04:37 centos sshd[31233]: Failed password for invalid user zz from 165.232.124.55 port 48342 ssh2 Mar 18 23:04:37 centos sshd[31228]: Failed password for invalid user zyx from 165.232.124.55 port 48246 ssh2 Mar 18 23:04:38 centos sshd[31235]: Failed password for invalid user zzwang from 165.232.124.55 port 48374 ssh2 Mar 18 23:04:38 centos sshd[31221]: Failed password for invalid user zyliu from 165.232.124.55 port 48150 ssh2 Mar 18 23:04:38 centos sshd[31231]: Failed password for invalid user zy from 165.232.124.55 port 48310 ssh2 Mar 18 23:04:38 centos sshd[31238]: Failed password for invalid user zzy from 165.232.124.55 port 48438 ssh2 Mar 18 23:04:39 centos sshd[31242]: Failed password for invalid user zz from 165.232.124.55 port 48502 ssh2 Mar 18 23:04:40 centos sshd[31240]: Failed password for invalid user zzy from 165.232.124.55 port 48470 ssh2 ssh防爆破脚本 #!/bin/bash # ssh 防爆破,登录失败超过3次就禁止登录 set -e secure_file=($(ls /var/log/secure* | grep -v \u0026#34;gz$\u0026#34;)) sfn=${#secure_file[@]} logfile=\u0026#34;/tmp/tmp.txt\u0026#34; for ((file=0;file\u0026lt;\u0026#34;$sfn\u0026#34;;file++)) do awk \u0026#39;/Invalid user/{print $(NF-2)}\u0026#39; \u0026#34;${secure_file[file]}\u0026#34; | awk \u0026#39;{ip[$1]++;}END{for(i in ip){print ip[i],i}}\u0026#39; | awk \u0026#39;$1\u0026gt;3{print $0}\u0026#39; \u0026gt;\u0026gt; \u0026#34;$logfile\u0026#34; done [ -s \u0026#34;$logfile\u0026#34; ] \u0026amp;\u0026amp; while read count sship do if [ $(grep -c \u0026#34;sshd:$sship\u0026#34; /etc/hosts.deny) -eq 0 ];then echo \u0026#34;sshd:$sship\u0026#34; \u0026gt;\u0026gt; /etc/hosts.deny time=$(date \u0026#34;+%Y-%m-%d %H:%M\u0026#34;) curl -s --retry 3 https://cip.cc/$sship | grep -E \u0026#34;IP|运营商|数据二|数据三\u0026#34; | awk -v time=\u0026#34;$time\u0026#34; -v count=\u0026#34;$count\u0026#34; \u0026#39;BEGIN{print \u0026#34;===============================\u0026#34;;print \u0026#34;时间 :\u0026#34;,time;print \u0026#34;次数 :\u0026#34;,count}$3!=\u0026#34;\u0026#34;{print $0}END{print \u0026#34;备注 ：已限制ssh连接\u0026#34;}\u0026#39; | sed \u0026#39;s/数据二/地址一/\u0026#39; | sed \u0026#39;s/数据三/地址二/\u0026#39; \u0026gt;\u0026gt; /tmp/sshd.log fi done \u0026lt; \u0026#34;$logfile\u0026#34; \u0026gt; \u0026#34;$logfile\u0026#34; 给脚本加上执行权限 ]# chmod +x secure.sh 放入cron 计划任务里 */60 * * * * root /usr/bin/sh /opt/secure.sh # 一个小时执行一次 测试一段时间的效果 ]# cat /tmp/ssh.log =============================== 时间 : 2022-02-16 17:43 次数 : 2274 IP : 159.89.224.4 运营商 : digitalocean.com 地址一 : 美国 | 纽约DigitalOcean数据中心 地址二 : 美国纽约纽约 备注 ：已限制ssh连接 =============================== 时间 : 2022-02-16 17:43 次数 : 4639 IP : 206.189.190.8 运营商 : digitalocean.com 地址一 : 美国 地址二 : 美国纽约纽约 备注 ：已限制ssh连接 =============================== 时间 : 2022-03-03 00:01 次数 : 15371 IP : 137.184.230.247 地址一 : 美国 地址二 : 美国俄亥俄辛辛那提 备注 ：已限制ssh连接 =============================== ","date":"December 9, 2021","externalUrl":"","permalink":"/posts/ssh-script/","section":"笔记","summary":"保障ssh远程登陆安全","title":"ssh防爆破","type":"posts"},{"content":" code-server简介 vscode 是一款轻量级但功能强大的源代码编辑器,适用于 Windows、macOS 和 Linux。 支持C++、C#、Java、Python、PHP、Go等等众多语言。 致力于在任何地方的任何机器上运行VS Code并在浏览器中访问它。 官方文档： code-server 软件包： code-server 服务器要求 1 GB 内存 2 个 CPU 内核 环境必须启用 WebSockets，因为代码服务器使用 WebSockets 在浏览器和服务器之间进行通信。 吞吐量 读取：3000 IOPS，50 MB/s 写入：3000 IOPS 50 MB/s 部署云端code-server 系统环境 $ cat /etc/redhat-release CentOS Linux release 7.6.1810 (Core) 用户环境 ]# useradd code ]# echo \u0026#34;password\u0026#34; | passwd --stdin code #\u0026#34;password\u0026#34; 为code用户登录密码 部署nginx环境 ## nginx repo 源 ]# vim /etc/yum.repos.d/nginx.repo [nginx] name=nginx repo baseurl=http://nginx.org/packages/centos/7/$basearch/ gpgcheck=0 enabled=1 --------------------------------------------------------- ]# yum repolist ## 安装nginx ]# yum -y install nginx ## 转发配置 ]# vim /etc/nginx/conf.d/default.conf server { listen 80; listen 443 ssl; server_name domain; ssl_certificate cert/cert-file-name.pem; #需要将cert-file-name.pem替换成已上传的证书文件的名称。 ssl_certificate_key cert/cert-file-name.key; #需要将cert-file-name.key替换成已上传的证书私钥文件的名称。 ssl_session_timeout 5m; ssl_ciphers ECDHE-RSA-AES128-GCM-SHA256:ECDHE:ECDH:AES:HIGH:!NULL:!aNULL:!MD5:!ADH:!RC4; #表示使用的加密套件的类型。 ssl_protocols TLSv1.1 TLSv1.2 TLSv1.3; #表示使用的TLS协议的类型。 ssl_prefer_server_ciphers on; if ( $server_port = \u0026#34;80\u0026#34; ) { rewrite ^(/.*)$ https://$host$1 permanent; } location / { proxy_pass http://localhost:8080; proxy_set_header Host $host; proxy_set_header Upgrade $http_upgrade; # 设置websocket proxy_set_header Connection upgrade; proxy_set_header Accept-Encoding gzip; } } ## 检查配置文件语法 ]# nginx -t nginx: the configuration file /etc/nginx/nginx.conf syntax is ok nginx: configuration file /etc/nginx/nginx.conf test is successful 开始部署code-server # 切换普通用户 ]# su - code # 下载软件包 ]$ wget https://github.com/cdr/code-server/releases/download/v3.12.0/code-server-3.12.0-linux-amd64.tar.gz # 解包 ]$ tar xf code-server-3.12.0-linux-amd64.tar.gz \u0026amp;\u0026amp; mv code-server-3.12.0-linux-amd64 code-server \u0026amp;\u0026amp; cd code-server/ # 编辑配置文件 ]$ vim config.yaml bind-addr: 127.0.0.1:8080 auth: password password: [password] # 此处为code-server登录密码 cert: false ]$ logout # 退出普通用户环境 配置code-server服务 ]# vim /usr/lib/systemd/system/code-server.service [Unit] Description=code-server Documentation=https://docs.cloudreve.org After=network.target Wants=network.target [Service] ExecStart=/home/code/code-server/bin/code-server --config=/home/code/code-server/config.yaml Restart=on-abnormal RestartSec=5s KillMode=mixed StandardOutput=null StandardError=syslog [Install] WantedBy=multi-user.target ]# systemctl daemon-reload # 加载服务配置 添加sudo提权 ]# vim /etc/sudoers code ALL=(ALL) /bin/systemctl, /bin/netstat, /bin/ps, /usr/sbin/nginx 切换普通用户起服务 ]# su - code ]$ sudo systemctl start code-server [sudo] password for code: # 此处输入code 用户密码 ]$ sudo systemctl enable code-server [sudo] password for code: # 此处输入code 用户密码 ]$ sudo nginx [sudo] password for code: # 此处输入code 用户密码 ","date":"December 7, 2021","externalUrl":"","permalink":"/posts/code-server/","section":"笔记","summary":"搭建云端IDE教程","title":"云端IDE","type":"posts"},{"content":"","date":"January 1, 1","externalUrl":null,"permalink":"/tags/artitalk/","section":"Tags","summary":"","title":"artitalk","type":"tags"},{"content":"","date":"January 1, 1","externalUrl":null,"permalink":"/tags/asciiflow/","section":"Tags","summary":"","title":"asciiflow","type":"tags"},{"content":"","date":"January 1, 1","externalUrl":null,"permalink":"/tags/author/","section":"Tags","summary":"","title":"author","type":"tags"},{"content":"","date":"January 1, 1","externalUrl":null,"permalink":"/tags/authors/","section":"Tags","summary":"","title":"authors","type":"tags"},{"content":"","date":"January 1, 1","externalUrl":null,"permalink":"/tags/blowfish/","section":"Tags","summary":"","title":"blowfish","type":"tags"},{"content":"记录一些关于blowfish主题的应用\n","date":"January 1, 1","externalUrl":null,"permalink":"/docs/theme/","section":"Docs","summary":"记录一些关于blowfish主题的应用","title":"blowfish主题","type":"docs"},{"content":"","date":"January 1, 1","externalUrl":null,"permalink":"/tags/bookstack/","section":"Tags","summary":"","title":"bookstack","type":"tags"},{"content":"","date":"January 1, 1","externalUrl":null,"permalink":"/categories/","section":"Categories","summary":"","title":"Categories","type":"categories"},{"content":"","date":"January 1, 1","externalUrl":null,"permalink":"/tags/comment/","section":"Tags","summary":"","title":"Comment","type":"tags"},{"content":"","date":"January 1, 1","externalUrl":null,"permalink":"/tags/convertio/","section":"Tags","summary":"","title":"Convertio","type":"tags"},{"content":"","date":"January 1, 1","externalUrl":null,"permalink":"/tags/css/","section":"Tags","summary":"","title":"css","type":"tags"},{"content":"","date":"January 1, 1","externalUrl":null,"permalink":"/series/css/","section":"Series","summary":"","title":"css","type":"series"},{"content":"","date":"January 1, 1","externalUrl":null,"permalink":"/docs/","section":"Docs","summary":"","title":"Docs","type":"docs"},{"content":"","date":"January 1, 1","externalUrl":null,"permalink":"/tags/git/","section":"Tags","summary":"","title":"git","type":"tags"},{"content":"","date":"January 1, 1","externalUrl":null,"permalink":"/tags/github/","section":"Tags","summary":"","title":"github","type":"tags"},{"content":"","date":"January 1, 1","externalUrl":"https://learngitbranching.js.org/?locale=zh_CN","permalink":"/tools/git/","section":"实用工具","summary":"","title":"Git在线学习","type":"tools"},{"content":"","date":"January 1, 1","externalUrl":null,"permalink":"/tags/go/","section":"Tags","summary":"","title":"Go","type":"tags"},{"content":"","date":"January 1, 1","externalUrl":"https://gobyexample-cn.github.io/","permalink":"/tools/go/","section":"实用工具","summary":"","title":"Go by Example 中文版","type":"tools"},{"content":"","date":"January 1, 1","externalUrl":null,"permalink":"/tags/html/","section":"Tags","summary":"","title":"html","type":"tags"},{"content":"","date":"January 1, 1","externalUrl":null,"permalink":"/tags/hugo/","section":"Tags","summary":"","title":"hugo","type":"tags"},{"content":"","date":"January 1, 1","externalUrl":null,"permalink":"/tags/icon/","section":"Tags","summary":"","title":"icon","type":"tags"},{"content":"","date":"January 1, 1","externalUrl":null,"permalink":"/tags/javascript/","section":"Tags","summary":"","title":"javascript","type":"tags"},{"content":"","date":"January 1, 1","externalUrl":null,"permalink":"/tags/music/","section":"Tags","summary":"","title":"music","type":"tags"},{"content":"","date":"January 1, 1","externalUrl":null,"permalink":"/series/","section":"Series","summary":"","title":"Series","type":"series"},{"content":"","date":"January 1, 1","externalUrl":null,"permalink":"/tags/sftp/","section":"Tags","summary":"","title":"sftp","type":"tags"},{"content":"","date":"January 1, 1","externalUrl":null,"permalink":"/tags/shuortcode/","section":"Tags","summary":"","title":"shuortcode","type":"tags"},{"content":"","date":"January 1, 1","externalUrl":null,"permalink":"/tags/talk/","section":"Tags","summary":"","title":"talk","type":"tags"},{"content":"","date":"January 1, 1","externalUrl":null,"permalink":"/tags/theme/","section":"Tags","summary":"","title":"theme","type":"tags"},{"content":"","date":"January 1, 1","externalUrl":null,"permalink":"/tags/tinyjpg/","section":"Tags","summary":"","title":"tinyjpg","type":"tags"},{"content":"","date":"January 1, 1","externalUrl":null,"permalink":"/tags/twikoo/","section":"Tags","summary":"","title":"twikoo","type":"tags"},{"content":"","date":"January 1, 1","externalUrl":null,"permalink":"/tags/waline/","section":"Tags","summary":"","title":"waline","type":"tags"},{"content":"","date":"January 1, 1","externalUrl":"https://web.qianguyihao.com/#%E5%89%8D%E8%A8%80","permalink":"/tools/html/","section":"实用工具","summary":"","title":"千古前端图文教程","type":"tools"},{"content":"日积月累，水滴石穿。\n","date":"January 1, 1","externalUrl":null,"permalink":"/docs/linux/","section":"Docs","summary":"日积月累，水滴石穿。","title":"日积月累","type":"docs"},{"content":"有用的链接\n","date":"January 1, 1","externalUrl":null,"permalink":"/tools/","section":"实用工具","summary":"有用的链接","title":"实用工具","type":"tools"},{"content":"","date":"January 1, 1","externalUrl":"https://bookstack.cn","permalink":"/tools/bookstatck.cn/","section":"实用工具","summary":"","title":"书栈网","type":"tools"},{"content":" 测试1 text 纯文本测试 Lorem ipsum dolor sit amet, consectetur adipiscing elit. Vivamus non magna ex. Donec sollicitudin ut lorem quis lobortis. Nam ac ipsum libero. Sed a ex eget ipsum tincidunt venenatis quis sed nisl. Pellentesque sed urna vel odio consequat tincidunt id ut purus. Nam sollicitudin est sed dui interdum rhoncus. 测试2 markdown markdown格式测试 hello world 测试3 shortcode 嵌套简码测试 Previous Nextsads 提示！ 这是一条测试 liang102/liang102.github.io JavaScript 4 0 Alert alert 参考了FixIt 主题的类似alert简码的风格。 Shortcode 151 字\u0026middot; loading \u0026middot; loading 主题作者提供的一些简码很自由，定义一些简码参数的编排，方便日后快速使用 2024/03/24 · 06:14 · 深圳 不蒜子 busuanzi 今天更新了网站主页的访问量统计，采用不蒜子组件。 Busuanzi 120 字\u0026middot; loading \u0026middot; loading 小橘子Single 给网站添加不蒜子访问量统计 2024/03/26 · 0:14 · 深圳 关于说说 原本是使用 Artitalk 来作为本站的说说，但是加载特别慢，有时甚至加载不出来，无意间看到👉 金圣皓博主的说说，觉得很不错。感兴趣的可以看看博主的 说说 本站的说说是从主题作者提供的简码模板基础上修改的，去掉了左边的线条，添加了一点博主的代码。 本站的说说经测试已实现了博主说说的基本功能，后续会再优化一下说说。 ","date":"January 1, 1","externalUrl":null,"permalink":"/about/shuoshuo/","section":"关于","summary":"畅所欲言","title":"说说","type":"about"},{"content":"","date":"January 1, 1","externalUrl":"https://tinyjpg.com/","permalink":"/tools/tinyjpg.com/","section":"实用工具","summary":"","title":"图像压缩工具","type":"tools"},{"content":"记录一些关于前端CSS的知识。\n","date":"January 1, 1","externalUrl":null,"permalink":"/docs/css/","section":"Docs","summary":"记录一些关于前端CSS的知识。","title":"学习","type":"docs"},{"content":"","date":"January 1, 1","externalUrl":"https://asciiflow.cn","permalink":"/tools/asciiflow.cn/","section":"实用工具","summary":"","title":"在线文本流程图表","type":"tools"},{"content":"","date":"January 1, 1","externalUrl":"https://convertio.co/zh/document-converter/","permalink":"/tools/convertio.co/","section":"实用工具","summary":"","title":"在线文档文件转换器","type":"tools"},{"content":"","date":"January 1, 1","externalUrl":null,"permalink":"/series/%E4%B8%BB%E9%A2%98%E7%9B%B8%E5%85%B3%E6%96%87%E6%A1%A3/","section":"Series","summary":"","title":"主题相关文档","type":"series"}]